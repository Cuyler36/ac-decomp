static void aUKI_rotate_calc(UKI_ACTOR* uki) {
    f32 angle_x = (uki->position_speed.x * 30.0f) / 6.0f;
    f32 angle_z = (uki->position_speed.z * 30.0f) / 6.0f;
    f32 sin = sin_s(uki->uki_rot_speed);

    uki->uki_angle.x = DEG2SHORT_ANGLE2(180.0f + (angle_x * sin));
    uki->uki_angle.z = DEG2SHORT_ANGLE2(180.0f + (angle_z * sin));
    uki->uki_rot_speed += DEG2SHORT_ANGLE2(5.625f);
}

extern Gfx tol_uki1_model[];
extern Gfx tol_uki2_model[];

static void aUKI_actor_draw(ACTOR* actorx, GAME* game) {
    UKI_ACTOR* uki = (UKI_ACTOR*)actorx;
    ACTOR* player_actor = GET_PLAYER_ACTOR_GAME_ACTOR(game);
    GRAPH* graph = game->graph;
    mActor_name_t item;

    OPEN_POLY_OPA_DISP(graph);

    Matrix_mult(&uki->mtxf, 1);
    gDPPipeSync(POLY_OPA_DISP++);

    switch (uki->proc) {
        case aUKI_PROC_CARRY:
            aUKI_rotate_calc(uki);
            Matrix_RotateY(player_actor->shape_info.rotation.y, 1);
            break;
        case aUKI_PROC_READY:
        case aUKI_PROC_AIR:
            uki->uki_angle.x = search_position_angleX(&actorx->world.position, &uki->rod_top_position);
            uki->uki_angle.y = search_position_angleY(&actorx->world.position, &uki->rod_top_position);
            uki->uki_angle.x += DEG2SHORT_ANGLE2(180.0f);
            Matrix_RotateY(uki->uki_angle.y, 1);
            Matrix_RotateX(uki->uki_angle.x, 1);
            break;
        case aUKI_PROC_CAST:
            add_calc_short_angle2(&uki->uki_angle.x, DEG2SHORT_ANGLE2(90.0f), 1.0f - sqrtf(0.95f), 1024, 0);
            uki->uki_angle.y = search_position_angleY(&actorx->world.position, &uki->rod_top_position);
            Matrix_RotateY(uki->uki_angle.y, 1);
            Matrix_RotateX(uki->uki_angle.x, 1);
            break;
        case aUKI_PROC_HIT:
            uki->uki_angle.y = search_position_angleY(&actorx->world.position, &uki->rod_top_position);
            if (uki->frame_timer < 10) {
                add_calc_short_angle2(&uki->uki_angle.x, DEG2SHORT_ANGLE2(0.0f), 1.0f - sqrtf(0.9f), 2048, 0);
            } else {
                uki->uki_angle.x = search_position_angleX(&actorx->world.position, &uki->rod_top_position);
                uki->uki_angle.x += DEG2SHORT_ANGLE2(-90.0f);
            }
            Matrix_RotateY(uki->uki_angle.y, 1);
            Matrix_RotateX(uki->uki_angle.x, 1);
            break;
        case aUKI_PROC_WAIT:
            if (uki->cast_timer == 0) {
                add_calc_short_angle2(&uki->uki_angle.x, DEG2SHORT_ANGLE2(0.0f), 1.0f - sqrtf(0.8f),
                                      DEG2SHORT_ANGLE2(45.0f), 0);
            } else {
                add_calc_short_angle2(&uki->uki_angle.x, DEG2SHORT_ANGLE2(90.0f), 1.0f - sqrtf(0.95f), 1024, 0);
            }
            uki->uki_angle.y = search_position_angleY(&actorx->world.position, &uki->rod_top_position);
            Matrix_RotateY(uki->uki_angle.y, 1);
            Matrix_RotateX(uki->uki_angle.x, 1);
            break;
        case aUKI_PROC_BITE:
            if (uki->gyo_status == 4) {
                add_calc_short_angle2(&uki->uki_angle.x, DEG2SHORT_ANGLE2(-90.0f), 1.0f - sqrtf(0.95f), 1024, 0);
                Matrix_RotateY(uki->uki_angle.y, 1);
            }
            break;
    }

    gSPMatrix(POLY_OPA_DISP++, _Matrix_to_Mtx_new(graph), G_MTX_NOPUSH | G_MTX_LOAD | G_MTX_MODELVIEW);
    gDPSetPrimColor(POLY_OPA_DISP++, 0, 128, uki->color[0], uki->color[1], uki->color[2], 255);

    if (mEv_CheckTitleDemo() > 0) {
        item = mPlib_Get_controller_data_for_title_demo_p()->equipped_item;
    } else {
        item = Now_Private->equipment;
    }

    if (item == ITM_ROD) {
        gSPDisplayList(POLY_OPA_DISP++, tol_uki1_model);
    } else {
        gSPDisplayList(POLY_OPA_DISP++, tol_uki2_model);
    }

    CLOSE_POLY_OPA_DISP(graph);
}
