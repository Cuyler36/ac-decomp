static int Player_actor_request_main_recieve_wait(GAME* game, ACTOR* talk_actor_p, int turn_flag, int ret_main_index,
                                                  mActor_name_t item, int surface_flag, int priority) {
    if (Player_actor_check_request_main_able(game, mPlayer_INDEX_RECIEVE_WAIT, priority)) {
        PLAYER_ACTOR* player = GET_PLAYER_ACTOR_GAME(game);
        mPlayer_request_recieve_wait_c* req_recieve_wait_p = &player->requested_main_index_data.recieve_wait;

        Player_actor_request_main_index(game, mPlayer_INDEX_RECIEVE_WAIT, priority);
        req_recieve_wait_p->talk_actor = talk_actor_p;
        req_recieve_wait_p->turn_flag = turn_flag;
        req_recieve_wait_p->prev_main_index = ret_main_index;
        req_recieve_wait_p->item = item;
        req_recieve_wait_p->on_surface_flag = surface_flag;
        return TRUE;
    }

    return FALSE;
}

static void Player_actor_setup_main_Recieve_wait(ACTOR* actorx, GAME* game) {
    PLAYER_ACTOR* player = (PLAYER_ACTOR*)actorx;
    mPlayer_request_recieve_wait_c* req_recieve_wait_p = &player->requested_main_index_data.recieve_wait;
    mPlayer_main_recieve_wait_c* main_recieve_wait_p = &player->main_data.recieve_wait;
    int anim1_idx;
    int part_table_idx;

    Player_actor_SetupItem_Base1(actorx, mPlayer_ANIM_WAIT1, -5.0f, &anim1_idx, &part_table_idx);
    main_recieve_wait_p->talk_actor_p = req_recieve_wait_p->talk_actor;
    main_recieve_wait_p->turn_flag = req_recieve_wait_p->turn_flag;
    main_recieve_wait_p->ret_main_index = req_recieve_wait_p->prev_main_index;
    main_recieve_wait_p->item = req_recieve_wait_p->item;
    main_recieve_wait_p->surface_flag = req_recieve_wait_p->on_surface_flag;
    Player_actor_InitAnimation_Base1(actorx, game, mPlayer_ANIM_WAIT1, anim1_idx, 1.0f, 1.0f, 0.5f, -5.0f,
                                     part_table_idx);
    Player_actor_setup_main_Base(actorx, game);
}

static void Player_actor_Movement_Recieve_wait(ACTOR* actorx) {
    Player_actor_Movement_Base_Stop(actorx, FALSE);
}

static void Player_actor_CulcAnimation_Recieve_wait(ACTOR* actorx) {
    f32 dummy;

    Player_actor_CulcAnimation_Base2(actorx, &dummy);
}

static void Player_actor_ObjCheck_Recieve_wait(ACTOR* actorx, GAME* game) {
    Player_actor_Excute_Corect_forStand(actorx, game);
}

static void Player_actor_request_proc_index_fromRecieve_wait(ACTOR* actorx, GAME* game) {
    PLAYER_ACTOR* player = (PLAYER_ACTOR*)actorx;

    if (Player_actor_Check_TradingItemMode(aHOI_REQUEST_TRANS_WAIT) ||
        Player_actor_Check_TradingItemMode(aHOI_REQUEST_RETURN_WAIT)) {
        mPlayer_main_recieve_wait_c* main_recieve_wait_p = &player->main_data.recieve_wait;
        ACTOR* talk_actor_p = main_recieve_wait_p->talk_actor_p;
        int turn_flag = main_recieve_wait_p->turn_flag;
        int ret_main_index = main_recieve_wait_p->ret_main_index;
        mActor_name_t item = main_recieve_wait_p->item;

        Player_actor_SettleRequestMainIndexPriority(actorx);
        Player_actor_request_main_recieve_stretch(game, talk_actor_p, turn_flag, ret_main_index, item,
                                                  main_recieve_wait_p->surface_flag, mPlayer_REQUEST_PRIORITY_19);
    }
}

static void Player_actor_main_Recieve_wait(ACTOR* actorx, GAME* game) {
    Player_actor_Movement_Recieve_wait(actorx);
    Player_actor_Reinput_force_position_angle(actorx, game);
    Player_actor_CulcAnimation_Recieve_wait(actorx);
    Player_actor_recover_lean_angle(actorx);
    Player_actor_set_eye_pattern_normal(actorx);
    Player_actor_ObjCheck_Recieve_wait(actorx, game);
    Player_actor_BGcheck_Wait(actorx);
    Player_actor_Item_main(actorx, game);
    Player_actor_request_proc_index_fromRecieve_wait(actorx, game);
}
