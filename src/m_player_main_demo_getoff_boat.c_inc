static int Player_actor_request_main_demo_getoff_boat_all(GAME* game, const xyz_t* pos_p, s16 angle_y, int prio) {
    if (Player_actor_check_request_main_able(game, mPlayer_INDEX_DEMO_GETOFF_BOAT, prio)) {
        PLAYER_ACTOR* player = GET_PLAYER_ACTOR_GAME(game);
        mPlayer_request_demo_getoff_boat_c* req_demo_getoff_boat_p =
            &player->requested_main_index_data.demo_getoff_boat;

        req_demo_getoff_boat_p->pos = *pos_p;
        req_demo_getoff_boat_p->angle_y = angle_y;
        Player_actor_request_main_index(game, mPlayer_INDEX_DEMO_GETOFF_BOAT, prio);
        return TRUE;
    }

    return FALSE;
}

static void Player_actor_setup_main_Demo_getoff_boat(ACTOR* actorx, GAME* game) {
    PLAYER_ACTOR* player = (PLAYER_ACTOR*)actorx;
    cKF_SkeletonInfo_R_c* kf0_p = &player->keyframe0;
    mPlayer_request_demo_getoff_boat_c* req_demo_getoff_boat_p = &player->requested_main_index_data.demo_getoff_boat;
    int anim1_idx;
    int part_table_idx;
    xyz_t pos;
    s16 angle_y;
    f32 cos;
    f32 sin;
    f32 cos_x;
    f32 cos_z;
    f32 sin_x;
    f32 sin_z;

    Player_actor_SetupItem_Base1(actorx, mPlayer_ANIM_GETOFF2, -5.0f, &anim1_idx, &part_table_idx);

    pos = req_demo_getoff_boat_p->pos;
    angle_y = req_demo_getoff_boat_p->angle_y;
    cos = cos_s(angle_y);
    cos_x = cos;
    cos_z = cos;
    sin = sin_s(angle_y);
    sin_x = sin;
    sin_z = sin;

    /* @hack - TODO: look for a better way to match these float operations */
    pos.x -= (sin_x *= 45.0f) + (cos_x *= -2.0f);
    pos.y -= 18.0f;
    pos.z -= (cos_z *= 45.0f) - (sin_z *= -2.0f);

    cKF_SkeletonInfo_R_Animation_Set_base_shape_trs(kf0_p, 0.0f, 1000.0f, 0.0f, 0, 0, DEG2SHORT_ANGLE2(90.0f));
    cKF_SkeletonInfo_R_AnimationMove_ct_base(&actorx->world.position, &pos, actorx->shape_info.rotation.y,
                                             actorx->world.angle.y, 5.0f, kf0_p,
                                             cKF_ANIMATION_TRANS_XZ | cKF_ANIMATION_TRANS_Y | cKF_ANIMATION_ROT_Y);

    Player_actor_InitAnimation_Base2(actorx, game, mPlayer_ANIM_GETOFF2, anim1_idx, 1.0f, 1.0f, 0.5f, -5.0f,
                                     cKF_FRAMECONTROL_STOP, part_table_idx);
    Player_actor_setup_main_Base(actorx, game);
    Player_actor_sound_JUMP(actorx);
}

static void Player_actor_settle_main_Demo_getoff_boat(ACTOR* actorx, GAME* game) {
    PLAYER_ACTOR* player = (PLAYER_ACTOR*)actorx;
    cKF_SkeletonInfo_R_c* kf0_p = &player->keyframe0;

    cKF_SkeletonInfo_R_AnimationMove_dt(kf0_p);
    actorx->world.angle.y = actorx->shape_info.rotation.y;
    actorx->shape_info.shadow_size_change_rate = 1.0f;
    actorx->shape_info.shadow_alpha_change_rate = 1.0f;
}

static int Player_actor_CulcAnimation_Demo_getoff_boat(ACTOR* actorx, f32* last_anim0_cur_frame_p) {
    return Player_actor_CulcAnimation_Base2(actorx, last_anim0_cur_frame_p);
}

static void Player_actor_SetSound_Demo_getoff_boat(ACTOR* actorx) {
    PLAYER_ACTOR* player = (PLAYER_ACTOR*)actorx;
    cKF_SkeletonInfo_R_c* kf0_p = &player->keyframe0;
    cKF_FrameControl_c* fc0_p = &kf0_p->frame_control;

    if (Player_actor_Check_AnimationFrame(fc0_p, 15.0f)) {
        Player_actor_sound_LANDING(actorx);
    }
}

static void Player_actor_ControlShadow_Demo_getoff_boat(ACTOR* actorx) {
    Player_actor_AppearShadow_fromAnimationFrame(actorx, 8.0f, 16.0f);
}

static void Player_actor_SearchAnimation_Demo_getoff_boat(ACTOR* actorx, f32 frame) {
    if (Player_actor_Check_AnimationFrame_PerfectEquel(actorx, frame) == FALSE) {
        Player_actor_SetSound_Demo_getoff_boat(actorx);
    }

    Player_actor_ControlShadow_Demo_getoff_boat(actorx);
}

static void Player_actor_Movement_Demo_getoff_boat(ACTOR* actorx) {
    PLAYER_ACTOR* player = (PLAYER_ACTOR*)actorx;
    cKF_SkeletonInfo_R_c* kf0_p = &player->keyframe0;

    cKF_SkeletonInfo_R_AnimationMove_base(&actorx->world.position, &actorx->shape_info.rotation.y, &actorx->scale,
                                          actorx->world.angle.y, kf0_p);
    Player_actor_Movement_Base_Stop(actorx, FALSE);
}

static void Player_actor_ObjCheck_Demo_getoff_boat(ACTOR* actorx, GAME* game) {
    Player_actor_Excute_Corect_forStand(actorx, game);
}

static void Player_actor_request_proc_index_fromDemo_getoff_boat(ACTOR* actorx, GAME* game, int end_flag) {
    if (end_flag) {
        Player_actor_SettleRequestMainIndexPriority(actorx);
        Player_actor_request_main_demo_wait_all(game, FALSE, 0, mPlayer_REQUEST_PRIORITY_19);
    }
}

static void Player_actor_main_Demo_getoff_boat(ACTOR* actorx, GAME* game) {
    f32 last_anim0_cur_frame;
    int end_flag;

    end_flag = Player_actor_CulcAnimation_Demo_getoff_boat(actorx, &last_anim0_cur_frame);
    Player_actor_SearchAnimation_Demo_getoff_boat(actorx, last_anim0_cur_frame);
    Player_actor_Movement_Demo_getoff_boat(actorx);
    Player_actor_Reset_force_position_angle(actorx);
    Player_actor_recover_lean_angle(actorx);
    Player_actor_set_eye_pattern_normal(actorx);
    Player_actor_ObjCheck_Demo_getoff_boat(actorx, game);
    Player_actor_Item_main(actorx, game);
    Player_actor_request_proc_index_fromDemo_getoff_boat(actorx, game, end_flag);
}
