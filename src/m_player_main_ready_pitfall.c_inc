static int Player_actor_request_main_ready_pitfall_all(GAME* game, const xyz_t* pos_p, int prio) {
    if (Player_actor_check_request_main_able(game, mPlayer_INDEX_READY_PITFALL, prio)) {
        PLAYER_ACTOR* player = GET_PLAYER_ACTOR_GAME(game);
        mPlayer_request_ready_pitfall_c* req_ready_pifall_p = &player->requested_main_index_data.ready_pitfall;

        req_ready_pifall_p->pos = *pos_p;
        Player_actor_request_main_index(game, mPlayer_INDEX_READY_PITFALL, prio);
        return TRUE;
    }

    return FALSE;
}

static void Player_actor_setup_main_Ready_pitfall(ACTOR* actorx, GAME* game) {
    PLAYER_ACTOR* player = (PLAYER_ACTOR*)actorx;
    cKF_SkeletonInfo_R_c* kf0_p = &player->keyframe0;
    mPlayer_request_ready_pitfall_c* req_ready_pifall_p = &player->requested_main_index_data.ready_pitfall;
    int anim1_idx;
    int part_table_idx;

    player->pitfall_flag = FALSE;
    Player_actor_SetupItem_Base1(actorx, mPlayer_ANIM_GURATUKU1, -5.0f, &anim1_idx, &part_table_idx);
    cKF_SkeletonInfo_R_Animation_Set_base_shape_trs(kf0_p, 0.0f, 1000.0f, 0.0f, 0, 0, DEG2SHORT_ANGLE2(90.0f));
    cKF_SkeletonInfo_R_AnimationMove_ct_base(&actorx->world.position, &req_ready_pifall_p->pos,
                                             actorx->shape_info.rotation.y, actorx->shape_info.rotation.y, 5.0f, kf0_p,
                                             cKF_ANIMATION_TRANS_XZ | cKF_ANIMATION_TRANS_Y);
    Player_actor_InitAnimation_Base2(actorx, game, mPlayer_ANIM_GURATUKU1, anim1_idx, 1.0f, 1.0f, 0.5f, -5.0f,
                                     cKF_FRAMECONTROL_STOP, part_table_idx);
    Player_actor_setup_main_Base(actorx, game);
}

static void Player_actor_settle_main_Ready_pitfall(ACTOR* actorx, GAME* game) {
    PLAYER_ACTOR* player = (PLAYER_ACTOR*)actorx;
    cKF_SkeletonInfo_R_c* kf0_p = &player->keyframe0;

    cKF_SkeletonInfo_R_AnimationMove_dt(kf0_p);
    eEC_CLIP->effect_kill_proc(eEC_EFFECT_ASE2, RSV_NO);
}

static int Player_actor_CulcAnimation_Ready_pitfall(ACTOR* actorx, f32* last_anim0_cur_frame) {
    return Player_actor_CulcAnimation_Base2(actorx, last_anim0_cur_frame);
}

static void Player_actor_Movement_Ready_pitfall(ACTOR* actorx) {
    PLAYER_ACTOR* player = (PLAYER_ACTOR*)actorx;
    cKF_SkeletonInfo_R_c* kf0_p = &player->keyframe0;

    cKF_SkeletonInfo_R_AnimationMove_base(&actorx->world.position, &actorx->shape_info.rotation.y, &actorx->scale,
                                          actorx->world.angle.y, kf0_p);
    Player_actor_Movement_Base_Stop(actorx, FALSE);
}

static void Player_actor_SetEffect_Ready_pitfall(ACTOR* actorx) {
    PLAYER_ACTOR* player = (PLAYER_ACTOR*)actorx;
    cKF_SkeletonInfo_R_c* kf0_p = &player->keyframe0;
    cKF_FrameControl_c* fc0_p = &kf0_p->frame_control;

    if (Player_actor_Check_AnimationFrame(fc0_p, 5.0f)) {
        player->draw_effect_idx = eEC_EFFECT_ASE2 + 1;
    }
}

static void Player_actor_SearchAnimation_Ready_pitfall(ACTOR* actorx, f32 frame) {
    if (Player_actor_Check_AnimationFrame_PerfectEquel(actorx, frame) == FALSE) {
        Player_actor_SetEffect_Ready_pitfall(actorx);
    }
}

static void Player_actor_set_eye_pattern_Ready_pitfall(ACTOR* actorx) {
    Player_actor_set_tex_anime_pattern(actorx);
}

static void Player_actor_ObjCheck_Ready_pitfall(ACTOR* actorx, GAME* game) {
    Player_actor_Excute_Corect_forStand(actorx, game);
}

static void Player_actor_request_proc_index_fromReady_pitfall(GAME* game, int end_flag) {

    if (end_flag) {
        Player_actor_request_main_fall_pitfall_all(game, mPlayer_REQUEST_PRIORITY_28);
    }
}

static void Player_actor_main_Ready_pitfall(ACTOR* actorx, GAME* game) {
    f32 last_anim0_cur_frame;
    int end_flag;

    end_flag = Player_actor_CulcAnimation_Ready_pitfall(actorx, &last_anim0_cur_frame);
    Player_actor_Movement_Ready_pitfall(actorx);
    Player_actor_Reinput_force_position_angle(actorx, game);
    Player_actor_SearchAnimation_Ready_pitfall(actorx, last_anim0_cur_frame);
    Player_actor_recover_lean_angle(actorx);
    Player_actor_set_eye_pattern_Ready_pitfall(actorx);
    Player_actor_ObjCheck_Ready_pitfall(actorx, game);
    Player_actor_Item_main(actorx, game);
    Player_actor_request_proc_index_fromReady_pitfall(game, end_flag);
}
