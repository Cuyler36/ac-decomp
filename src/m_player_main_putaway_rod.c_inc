
static int Player_actor_request_main_putaway_rod(GAME* game, s16 angle, int exchange_flag, int priority) {
    if (Player_actor_check_request_main_able(game, mPlayer_INDEX_PUTAWAY_ROD, priority)) {
        PLAYER_ACTOR* player = GET_PLAYER_ACTOR_GAME(game);

        Player_actor_request_main_index(game, mPlayer_INDEX_PUTAWAY_ROD, priority);

        player->requested_main_index_data.putaway_rod.angle_y = angle;
        player->requested_main_index_data.putaway_rod.exchange_flag = exchange_flag;

        return TRUE;
    }

    return FALSE;
}

static void Player_actor_setup_main_Putaway_rod(ACTOR* actor, GAME* game) {
    PLAYER_ACTOR* player = (PLAYER_ACTOR*)actor;
    int kind = Player_actor_Get_ItemKind_from_submenu();
    mPlayer_main_putaway_rod_c* main_putaway = &player->main_data.putaway_rod;
    mPlayer_request_putaway_rod_c* req_putaway = &player->requested_main_index_data.putaway_rod;

    main_putaway->timer = 0.0f;
    main_putaway->angle_y = req_putaway->angle_y;
    main_putaway->exchange_flag = req_putaway->exchange_flag;

    Player_actor_SetupItem_Base2(actor, kind, mPlayer_ANIM_TRANS_WAIT1, mPlayer_INDEX_HOLD, -5.0f, -1.0f, 0);
    Player_actor_InitAnimation_Base2(actor, game, mPlayer_ANIM_PUTAWAY_T1, mPlayer_ANIM_PUTAWAY_T1, 1.0f, 1.0f, 0.5f,
                                     -3.0f, 0, 0);
    Player_actor_setup_main_Base(actor, game);

    Player_actor_sound_GASAGOSO(actor);
}

static void Player_actor_Movement_Putaway_rod(ACTOR* actor) {
    Player_actor_Movement_Base_Braking_common(actor, 0.32625001f);
}

static int Player_actor_CulcAnimation_Putaway_rod(ACTOR* actor, f32* frame_calc) {
    return Player_actor_CulcAnimation_Base2(actor, frame_calc);
}

static void Player_actor_ObjCheck_Putaway_rod(ACTOR* actor, GAME* game) {
    Player_actor_Excute_Corect_forStand(actor, game);
}

static void Player_actor_BGcheck_Putaway_rod(ACTOR* actor) {
    Player_actor_BGcheck_common_type1(actor);
}

static void Player_actor_SearchAnimation_Putaway_rod(ACTOR* actor, GAME* game, f32 frame) {
    if (!Player_actor_Check_AnimationFrame_PerfectEquel(actor, frame)) {
        Player_actor_Set_FootMark_Base1(actor, game, FALSE, FALSE);
    }
}

static void Player_actor_SetTimer_Putaway_rod(ACTOR* actor) {
    PLAYER_ACTOR* player = (PLAYER_ACTOR*)actor;
    mPlayer_main_putaway_rod_c* main_putaway = &player->main_data.putaway_rod;

    main_putaway->timer += 1.0f;
}

static void Player_actor_request_proc_index_fromPutaway_rod(ACTOR* actor, GAME* game, int end_flag) {
    PLAYER_ACTOR* player = (PLAYER_ACTOR*)actor;
    GAME_PLAY* play = (GAME_PLAY*)game;
    mPlayer_main_putaway_rod_c* main_putaway = &player->main_data.putaway_rod;
    if (end_flag) {
        if (main_putaway->exchange_flag) {
            UKI_ACTOR* uki = (UKI_ACTOR*)player->fishing_rod_actor_p;
            mActor_name_t type = uki->get_fish_type_proc(&uki->actor_class);

            mSM_open_submenu_new2(&play->submenu, mSM_OVL_INVENTORY, mSM_IV_OPEN_EXCHANGE, type, NULL,
                                  main_putaway->angle_y);
        } else {
            Player_actor_SettleRequestMainIndexPriority(actor);
            Player_actor_request_main_wait_all(game, -5.0f, 0.0f, 0, mPlayer_REQUEST_PRIORITY_1);
        }
    }
}

static void Player_actor_main_Putaway_rod(ACTOR* actor, GAME* game) {
    f32 frame_calc;
    int end_flag;

    Player_actor_Movement_Putaway_rod(actor);
    Player_actor_Reinput_force_position_angle(actor, game);
    end_flag = Player_actor_CulcAnimation_Putaway_rod(actor, &frame_calc);
    Player_actor_SearchAnimation_Putaway_rod(actor, game, frame_calc);
    Player_actor_recover_lean_angle(actor);
    Player_actor_set_tex_anime_pattern(actor);
    Player_actor_ObjCheck_Putaway_rod(actor, game);
    Player_actor_BGcheck_Putaway_rod(actor);
    Player_actor_SetTimer_Putaway_rod(actor);
    Player_actor_Item_main(actor, game);
    Player_actor_request_proc_index_fromPutaway_rod(actor, game, end_flag);
}
