static int Player_actor_request_main_knock_door(GAME* game, const xyz_t* pos_p, s16 angle_y, int prio) {
    if (Player_actor_check_request_main_able(game, mPlayer_INDEX_KNOCK_DOOR, prio)) {
        PLAYER_ACTOR* player = GET_PLAYER_ACTOR_GAME(game);
        mPlayer_request_knock_door_c* req_knock_door_p = &player->requested_main_index_data.knock_door;

        req_knock_door_p->request_main_index = player->requested_main_index;
        req_knock_door_p->pos = *pos_p;
        req_knock_door_p->angle_y = angle_y;

        Player_actor_request_main_index(game, mPlayer_INDEX_KNOCK_DOOR, prio);
        return TRUE;
    }

    return FALSE;
}

static void Player_actor_setup_main_Knock_door(ACTOR* actorx, GAME* game) {
    PLAYER_ACTOR* player = (PLAYER_ACTOR*)actorx;
    cKF_SkeletonInfo_R_c* kf0_p = &player->keyframe0;
    mPlayer_request_knock_door_c* req_knock_door_p = &player->requested_main_index_data.knock_door;
    mPlayer_main_knock_door_c* knock_door_p = &player->main_data.knock_door;
    int anim1_idx;
    int part_table_idx;

    knock_door_p->request_data = *req_knock_door_p;

    Player_actor_SetupItem_Base1(actorx, mPlayer_ANIM_KNOCK1, -5.0f, &anim1_idx, &part_table_idx);
    cKF_SkeletonInfo_R_Animation_Set_base_shape_trs(kf0_p, 0.0f, 1000.0f, 0.0f, 0, 0, DEG2SHORT_ANGLE2(90.0f));
    cKF_SkeletonInfo_R_AnimationMove_ct_base(&actorx->world.position, &req_knock_door_p->pos,
                                             actorx->shape_info.rotation.y, req_knock_door_p->angle_y, 5.0f, kf0_p,
                                             cKF_ANIMATION_ROT_Y | cKF_ANIMATION_TRANS_XZ);
    Player_actor_InitAnimation_Base2(actorx, game, mPlayer_ANIM_KNOCK1, anim1_idx, 1.0f, 1.0f, 0.5f, -5.0f,
                                     cKF_FRAMECONTROL_STOP, part_table_idx);
    Player_actor_setup_main_Base(actorx, game);
}

static void Player_actor_settle_main_Knock_door(ACTOR* actorx, GAME* game) {
    PLAYER_ACTOR* player = (PLAYER_ACTOR*)actorx;
    cKF_SkeletonInfo_R_c* kf0_p = &player->keyframe0;

    cKF_SkeletonInfo_R_AnimationMove_dt(kf0_p);
    actorx->world.angle.y = actorx->shape_info.rotation.y;
}

static int Player_actor_CulcAnimation_Knock_door(ACTOR* actorx, f32* last_anim0_cur_frame) {
    return Player_actor_CulcAnimation_Base2(actorx, last_anim0_cur_frame);
}

static void Player_actor_Movement_Knock_door(ACTOR* actorx) {
    PLAYER_ACTOR* player = (PLAYER_ACTOR*)actorx;
    cKF_SkeletonInfo_R_c* kf0_p = &player->keyframe0;

    cKF_SkeletonInfo_R_AnimationMove_base(&actorx->world.position, &actorx->shape_info.rotation.y, &actorx->scale,
                                          actorx->world.angle.y, kf0_p);
    Player_actor_Movement_Base_Stop(actorx, FALSE);
}

static void Player_actor_SetSound_Knock_door(ACTOR* actorx) {
    PLAYER_ACTOR* player = (PLAYER_ACTOR*)actorx;
    cKF_SkeletonInfo_R_c* kf0_p = &player->keyframe0;
    cKF_FrameControl_c* fc0_p = &kf0_p->frame_control;

    if (Player_actor_Check_AnimationFrame(fc0_p, 13.0f) || Player_actor_Check_AnimationFrame(fc0_p, 20.0f)) {
        Player_actor_sound_knock(actorx);
    }
}

static void Player_actor_SearchAnimation_Knock_door(ACTOR* actorx, f32 frame) {
    if (Player_actor_Check_AnimationFrame_PerfectEquel(actorx, frame) == FALSE) {
        Player_actor_SetSound_Knock_door(actorx);
    }
}

static void Player_actor_ObjCheck_Knock_door(ACTOR* actorx, GAME* game) {
    Player_actor_Excute_Corect_forStand(actorx, game);
}

static void Player_actor_BGcheck_Knock_door(ACTOR* actorx) {
    Player_actor_BGcheck_common_type1(actorx);
}

static void Player_actor_request_proc_index_fromKnock_door(ACTOR* actorx, GAME* game, int end_flag) {
    if (end_flag) {
        PLAYER_ACTOR* player = (PLAYER_ACTOR*)actorx;
        mPlayer_main_knock_door_c* knock_door_p = &player->main_data.knock_door;
        bcopy(&knock_door_p->request_data.request_data, &player->requested_main_index_data,
              sizeof(knock_door_p->request_data.request_data));
        Player_actor_request_main_index(game, knock_door_p->request_data.request_main_index,
                                        mPlayer_REQUEST_PRIORITY_39);
    }
}

static void Player_actor_main_Knock_door(ACTOR* actorx, GAME* game) {
    f32 last_anim0_cur_frame;
    int end_flag;

    end_flag = Player_actor_CulcAnimation_Knock_door(actorx, &last_anim0_cur_frame);
    Player_actor_Movement_Knock_door(actorx);
    Player_actor_Reinput_force_position_angle(actorx, game);
    Player_actor_SearchAnimation_Knock_door(actorx, last_anim0_cur_frame);
    Player_actor_recover_lean_angle(actorx);
    Player_actor_set_eye_pattern_normal(actorx);
    Player_actor_ObjCheck_Knock_door(actorx, game);
    Player_actor_BGcheck_Knock_door(actorx);
    Player_actor_Item_main(actorx, game);
    Player_actor_request_proc_index_fromKnock_door(actorx, game, end_flag);
}
