static int Player_actor_request_main_fill_scoop_all(GAME* game, const xyz_t* pos, int priority) {
    if (Player_actor_check_request_main_able(game, mPlayer_INDEX_FILL_SCOOP, priority)) {
        PLAYER_ACTOR* player = GET_PLAYER_ACTOR_GAME(game);

        player->requested_main_index_data.fill_scoop.dig_pos = *pos;

        Player_actor_request_main_index(game, mPlayer_INDEX_FILL_SCOOP, priority);

        return TRUE;
    }

    return FALSE;
}

static void Player_actor_setup_main_Fill_scoop(ACTOR* actor, GAME* game) {
    PLAYER_ACTOR* player = (PLAYER_ACTOR*)actor;
    mPlayer_main_fill_scoop_c* main_scoop = &player->main_data.fill_scoop;
    mPlayer_request_fill_scoop_c* req_scoop = &player->requested_main_index_data.fill_scoop;

    main_scoop->target_pos = req_scoop->dig_pos;

    Player_actor_InitAnimation_Base2(actor, game, mPlayer_ANIM_FILL_UP1, mPlayer_ANIM_FILL_UP1, 1.0f, 1.0f, 0.5f, -5.0f,
                                     0, 0);
    Player_actor_setup_main_Base(actor, game);
}

static void Player_actor_Movement_Fill_scoop(ACTOR* actor) {
    PLAYER_ACTOR* player = (PLAYER_ACTOR*)actor;
    mPlayer_main_fill_scoop_c* main_scoop = &player->main_data.fill_scoop;

    Player_actor_Movement_axe_common(actor, &main_scoop->target_pos);

    actor->world.angle.y = actor->shape_info.rotation.y;
}

static int Player_actor_CulcAnimation_Fill_scoop(ACTOR* actor, f32* frame_calc) {
    return Player_actor_CulcAnimation_Base2(actor, frame_calc);
}

static void Player_actor_Reset_Hole_Fill_scoop(ACTOR* actor) {
    PLAYER_ACTOR* player = (PLAYER_ACTOR*)actor;
    f32 mod = 0.0f;
    cKF_FrameControl_c* fc = &player->keyframe0.frame_control;

    if (player->animation0_idx == mPlayer_ANIM_FILL_UP_I1) {
        mod = 7.0f;
    } else {
        mod = 0.0f;
    }

    if (Player_actor_Check_AnimationFrame(fc, 18.0f + mod) && Common_Get(clip).bg_item_clip != NULL) {
        mPlayer_main_fill_scoop_c* main_scoop = &player->main_data.fill_scoop;
        xyz_t* pos = &main_scoop->target_pos;
        Common_Get(clip).bg_item_clip->bury_hole_effect_entry_proc(EMPTY_NO, pos, 46);
    }
}

static void Player_actor_SetEffectHit_Fill_scoop(ACTOR* actor, GAME* game, const xyz_t* pos) {
    PLAYER_ACTOR* player = (PLAYER_ACTOR*)actor;
    cKF_FrameControl_c* fc = &player->keyframe0.frame_control;
    s16 arg;
    f32 mod;
    f32 c1;
    f32 c2;
    f32 c3;
    f32 c4;

    if (player->animation0_idx == mPlayer_ANIM_FILL_UP_I1) {
        mod = 7.0f;
    } else {
        mod = 0.0f;
    }
    c1 = 13.0f + mod;
    c2 = 19.0f + mod;
    c3 = 25.0f + mod;
    c4 = 40.0f + mod;
    if (Player_actor_Check_AnimationFrame(fc, c1)) {
        arg = 3;
    } else if (Player_actor_Check_AnimationFrame(fc, c2)) {
        arg = 4;
    } else if (Player_actor_Check_AnimationFrame(fc, c3)) {
        arg = 5;
    } else {
        if (Player_actor_Check_AnimationFrame(fc, c4)) {
            Common_Get(clip).effect_clip->effect_make_proc(eEC_EFFECT_DIG_SCOOP, *pos, 2, actor->shape_info.rotation.y,
                                                           game, RSV_NO, mCoBG_Wpos2Attribute(*pos, NULL), 2);
            return;
        } else {
            return;
        }
    }
    Common_Get(clip).effect_clip->effect_make_proc(eEC_EFFECT_DIG_HOLE, *pos, 2, actor->shape_info.rotation.y, game,
                                                   RSV_NO, mCoBG_Wpos2Attribute(*pos, NULL), arg);
}

static void Player_actor_SetEffect_Fill_scoop(ACTOR* actor, GAME* game) {
    PLAYER_ACTOR* player = (PLAYER_ACTOR*)actor;

    mPlayer_main_fill_scoop_c* main_scoop = &player->main_data.fill_scoop;

    Player_actor_SetEffectHit_Fill_scoop(actor, game, &main_scoop->target_pos);
}

static void Player_actor_SetSound_Fill_scoop(ACTOR* actor) {
    PLAYER_ACTOR* player = (PLAYER_ACTOR*)actor;
    f32 mod = 0.0f;
    cKF_FrameControl_c* fc = &player->keyframe0.frame_control;

    if (player->animation0_idx == mPlayer_ANIM_FILL_UP_I1) {
        mod = 7.0f;
    } else {
        mod = 0.0f;
    }

    if (Player_actor_Check_AnimationFrame(fc, (18.0f + mod) - 7.0f)) {
        Player_actor_sound_scoop_umeru(actor);
        Player_actor_set_viblation_Fill_scoop();
    }
}

static void Player_actor_SearchAnimation_Fill_scoop(ACTOR* actor, GAME* game, f32 frame) {
    if (!Player_actor_Check_AnimationFrame_PerfectEquel(actor, frame)) {
        Player_actor_Reset_Hole_Fill_scoop(actor);
        Player_actor_SetEffect_Fill_scoop(actor, game);
        Player_actor_SetSound_Fill_scoop(actor);
        Player_actor_Set_FootMark_Base1(actor, game, FALSE, FALSE);
    }
}

static void Player_actor_ObjCheck_Fill_scoop(ACTOR* actor, GAME* game) {
    Player_actor_Excute_Corect_forStand(actor, game);
}

static void Player_actor_BGcheck_Fill_scoop(ACTOR* actor) {
    Player_actor_BGcheck_common_type1(actor);
}

static int Player_actor_lean_angle_Fill_scoop(ACTOR* actor) {
    PLAYER_ACTOR* player = (PLAYER_ACTOR*)actor;
    f32 mod = 0.0f;

    if (player->animation0_idx == mPlayer_ANIM_FILL_UP_I1) {
        mod = 7.0f;
    } else {
        mod = 0.0f;
    }

    Player_actor_lean_angle_scoop_common(actor, &player->main_data.fill_scoop.target_pos, 42.0f + mod);
}

static void Player_actor_request_proc_index_fromFill_scoop(ACTOR* actor, GAME* game, int end_flag) {
    PLAYER_ACTOR* player = (PLAYER_ACTOR*)actor;

    if (end_flag != 0) {
        Player_actor_SettleRequestMainIndexPriority(actor);
        Player_actor_request_main_wait_all(game, -5.0f, 0.0f, 0, mPlayer_REQUEST_PRIORITY_1);
    } else {
        f32 mod;
        cKF_FrameControl_c* fc = &player->keyframe0.frame_control;

        if (player->animation0_idx == mPlayer_ANIM_FILL_UP_I1) {
            mod = 7.0f;
        } else {
            mod = 0.0f;
        }

        if (Player_actor_Check_AnimationFrame(fc, 44.5f + mod)) {
            Player_actor_SettleRequestMainIndexPriority(actor);
            Player_actor_Set_status_for_bee(actor, TRUE);
        } else {
            f32 cur_frame = fc->current_frame;

            if (cur_frame >= (45.0f + mod) && !Player_actor_CheckAndRequest_main_scoop_all(game, 4) &&
                (Player_actor_GetController_move_percentX() || Player_actor_GetController_move_percentY())) {
                Player_actor_request_main_walk_all(game, NULL, -5.0f, 0, mPlayer_REQUEST_PRIORITY_1);
            }
        }
    }
}

static void Player_actor_main_Fill_scoop(ACTOR* actor, GAME* game) {
    f32 frame_calc;
    int end_flag;

    Player_actor_Movement_Fill_scoop(actor);
    Player_actor_Reinput_force_position_angle(actor, game);
    end_flag = Player_actor_CulcAnimation_Fill_scoop(actor, &frame_calc);
    Player_actor_SearchAnimation_Fill_scoop(actor, game, frame_calc);
    Player_actor_recover_lean_angle(actor);
    Player_actor_set_eye_pattern_normal(actor);
    Player_actor_ObjCheck_Fill_scoop(actor, game);
    Player_actor_BGcheck_Fill_scoop(actor);
    Player_actor_lean_angle_Fill_scoop(actor);
    Player_actor_Item_main(actor, game);
    Player_actor_request_proc_index_fromFill_scoop(actor, game, end_flag);
}
