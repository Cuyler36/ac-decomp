static int Player_actor_request_main_refuse(GAME* game, int flag) {
    if (Player_actor_check_request_main_able(game, mPlayer_INDEX_REFUSE, flag) != FALSE) {
        Player_actor_request_main_index(game, mPlayer_INDEX_REFUSE, flag);
        return TRUE;
    }
    return FALSE;
}

static void Player_actor_setup_main_Refuse(ACTOR* actor, GAME* game) {
    PLAYER_ACTOR* player = (PLAYER_ACTOR*)actor;
    int anim_idx;
    int part_table_idx;

    Player_actor_SetupItem_Base1(actor, 0, -5.0f, &anim_idx, &part_table_idx);
    Player_actor_InitAnimation_Base1(actor, game, mPlayer_ANIM_WAIT1, anim_idx, 1.0f, 1.0f, 0.5f, -5.0f,
                                     part_table_idx);
    Player_actor_setup_main_Base(actor, game);
}

static void Player_actor_Movement_Refuse(ACTOR* actor) {
    Player_actor_Movement_Base_Braking(actor);
}

static void Player_actor_CulcAnimation_Refuse(ACTOR* actor) {
    f32 base;

    Player_actor_CulcAnimation_Base2(actor, &base);
}

static void Player_actor_ObjCheck_Refuse(ACTOR* actor, GAME* game) {
    Player_actor_Excute_Corect_forStand(actor, game);
}

static void Player_actor_BGcheck_Refuse(ACTOR* actor) {
    Player_actor_BGcheck_common_type2(actor);
}

static void Player_actor_main_Refuse(ACTOR* actor, GAME* game) {
    Player_actor_Movement_Refuse(actor);
    Player_actor_Reinput_force_position_angle(actor, game);
    Player_actor_CulcAnimation_Refuse(actor);
    Player_actor_recover_lean_angle(actor);
    Player_actor_set_eye_pattern_normal(actor);
    Player_actor_ObjCheck_Refuse(actor, game);
    Player_actor_BGcheck_Refuse(actor);
    Player_actor_Item_main(actor, game);
}
