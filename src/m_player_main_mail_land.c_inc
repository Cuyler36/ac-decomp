static int Player_actor_request_main_mail_land_all(GAME* game, int prio) {
    if (Player_actor_check_request_main_able(game, mPlayer_INDEX_MAIL_LAND, prio)) {
        Player_actor_request_main_index(game, mPlayer_INDEX_MAIL_LAND, prio);
        return TRUE;
    }

    return FALSE;
}

static void Player_actor_request_main_mail_land_from_submenu(ACTOR* actorx, GAME* game) {
    Player_actor_request_main_mail_land_all(game, mPlayer_REQUEST_PRIORITY_31);
}

static void Player_actor_setup_main_Mail_land(ACTOR* actorx, GAME* game) {
    int anim1_idx;
    int part_table_idx;

    Player_actor_SetupItem_Base1(actorx, mPlayer_ANIM_CONFIRM1, -5.0f, &anim1_idx, &part_table_idx);
    Player_actor_InitAnimation_Base3(actorx, game, mPlayer_ANIM_CONFIRM1, anim1_idx, 0.5f, -5.0f, cKF_FRAMECONTROL_STOP,
                                     part_table_idx);
    Player_actor_setup_main_Base(actorx, game);
}

static void Player_actor_Movement_Mail_land(ACTOR* actorx) {
    Player_actor_Movement_Base_Braking_common(actorx, 0.23925f);
}

static int Player_actor_CulcAnimation_Mail_land(ACTOR* actorx) {
    f32 dummy;

    return Player_actor_CulcAnimation_Base2(actorx, &dummy);
}

static void Player_actor_ObjCheck_Mail_land(ACTOR* actorx, GAME* game) {
    Player_actor_Excute_Corect_forStand(actorx, game);
}

static void Player_actor_BGcheck_Mail_land(ACTOR* actorx) {
    Player_actor_BGcheck_common_type1(actorx);
}

static void Player_actor_request_proc_index_fromMail_land(ACTOR* actorx, GAME* game, int end_flag) {

    if (end_flag) {
        Player_actor_SettleRequestMainIndexPriority(actorx);
        Player_actor_request_main_wait_all(game, -5.0f, 0.0f, 0, mPlayer_REQUEST_PRIORITY_1);
    } else {
        PLAYER_ACTOR* player = (PLAYER_ACTOR*)actorx;
        cKF_SkeletonInfo_R_c* kf0_p = &player->keyframe0;
        cKF_FrameControl_c* fc0_p = &kf0_p->frame_control;

        if (Player_actor_Check_AnimationFrame(fc0_p, 16.5f)) {
            Player_actor_SettleRequestMainIndexPriority(actorx);
            Player_actor_Set_status_for_bee(actorx, TRUE);
        } else if (fc0_p->current_frame <= 16.0f &&
                   (Player_actor_GetController_move_percentX() || Player_actor_GetController_move_percentY())) {
            Player_actor_request_main_walk_all(game, NULL, -5.0f, 0, mPlayer_REQUEST_PRIORITY_1);
        }
    }
}

static void Player_actor_main_Mail_land(ACTOR* actorx, GAME* game) {
    int end_flag;

    Player_actor_Movement_Mail_land(actorx);
    end_flag = Player_actor_CulcAnimation_Mail_land(actorx);
    Player_actor_Reinput_force_position_angle(actorx, game);
    Player_actor_recover_lean_angle(actorx);
    Player_actor_set_eye_pattern_normal(actorx);
    Player_actor_ObjCheck_Mail_land(actorx, game);
    Player_actor_BGcheck_Mail_land(actorx);
    Player_actor_Item_main(actorx, game);
    Player_actor_request_proc_index_fromMail_land(actorx, game, end_flag);
}
