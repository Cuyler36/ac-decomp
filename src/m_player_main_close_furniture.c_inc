static int Player_actor_request_main_close_furniture(GAME* game, int priority) {
    if (mPlib_get_player_actor_main_index(game) == mPlayer_INDEX_WAIT_OPEN_FURNITURE &&
        Player_actor_check_request_main_able(game, mPlayer_INDEX_CLOSE_FURNITURE, priority)) {
        PLAYER_ACTOR* player = GET_PLAYER_ACTOR_GAME(game);
        int anim_idx;
        switch (player->animation0_idx) {
            case mPlayer_ANIM_KAGU_WAIT_D1:
                anim_idx = mPlayer_ANIM_KAGU_CLOSE_D1;
                break;
            case mPlayer_ANIM_KAGU_WAIT_H1:
                anim_idx = mPlayer_ANIM_KAGU_CLOSE_H1;
                break;
            default:
                anim_idx = mPlayer_ANIM_KAGU_CLOSE_K1;
                break;
        }

        player->requested_main_index_data.close_furniture.anim_idx = anim_idx;
        Player_actor_request_main_index(game, mPlayer_INDEX_CLOSE_FURNITURE, priority);

        return TRUE;
    }
    return FALSE;
}

static void Player_actor_settle_main_Close_furniture(ACTOR* actor, GAME* game) {
    PLAYER_ACTOR* player = (PLAYER_ACTOR*)actor;

    cKF_SkeletonInfo_R_AnimationMove_dt(&player->keyframe0);
}

static void Player_actor_setup_main_Close_furniture(ACTOR* actor, GAME* game) {
    PLAYER_ACTOR* player = (PLAYER_ACTOR*)actor;
    cKF_SkeletonInfo_R_c* keyf;
    mPlayer_request_close_furniture_c* req_close = &player->requested_main_index_data.close_furniture;
    int anim_idx;

    keyf = &player->keyframe0;
    anim_idx = req_close->anim_idx;

    cKF_SkeletonInfo_R_Animation_Set_base_shape_trs(keyf, 0.0f, 1000.0f, 200.0f, 0, 0, 0x4000);
    cKF_SkeletonInfo_R_AnimationMove_ct_base(&actor->world.position, &actor->world.position,
                                             actor->shape_info.rotation.y, 0, 5.0f, keyf, 1);
    Player_actor_InitAnimation_Base2(actor, game, anim_idx, anim_idx, 1.0f, 1.0f, 0.5f, -5.0f, 0, 0);
    Player_actor_setup_main_Base(actor, game);
}
static int Player_actor_CulcAnimation_Close_furniture(ACTOR* actor, f32* frame_calc) {
    return Player_actor_CulcAnimation_Base2(actor, frame_calc);
}

static void Player_actor_Movement_Close_furniture(ACTOR* actor) {
    PLAYER_ACTOR* player = (PLAYER_ACTOR*)actor;

    cKF_SkeletonInfo_R_AnimationMove_base(&actor->world.position, &actor->shape_info.rotation.y, &actor->scale,
                                          actor->world.angle.y, &player->keyframe0);
    Actor_position_moveF(actor);
}

static void Player_actor_SearchAnimation_Close_furniture(ACTOR* actor, GAME* game, f32 frame) {
    if (!Player_actor_Check_AnimationFrame_PerfectEquel(actor, frame)) {
        Player_actor_Set_FootMark_Base1(actor, game, FALSE, FALSE);
    }
}

static void Player_actor_ObjCheck_Close_furniture(ACTOR* actor, GAME* game) {
    Player_actor_Excute_Corect_forStand(actor, game);
}

static void Player_actor_BGcheck_Close_furniture(ACTOR* actor) {
    Player_actor_BGcheck_common_type3(actor);
}

static void Player_actor_request_proc_index_fromClose_furniture(ACTOR* actor, GAME* game, int arg) {
    PLAYER_ACTOR* player = (PLAYER_ACTOR*)actor;

    if (arg != 0) {
        if (player->keyframe0.frame_control.speed == 0.0f) {
            Player_actor_SettleRequestMainIndexPriority(actor);
            Player_actor_request_main_wait_all(game, -10.0f, 0.0f, 0, mPlayer_REQUEST_PRIORITY_1);
        } else {
            player->keyframe0.frame_control.speed = 0.0f;
            player->keyframe1.frame_control.speed = 0.0f;
        }
    }
}

static void Player_actor_main_Close_furniture(ACTOR* actor, GAME* game) {
    f32 frame_calc;
    int arg = Player_actor_CulcAnimation_Close_furniture(actor, &frame_calc);

    Player_actor_Movement_Close_furniture(actor);
    Player_actor_Reinput_force_position_angle(actor, game);
    Player_actor_SearchAnimation_Close_furniture(actor, game, frame_calc);
    Player_actor_recover_lean_angle(actor);
    Player_actor_set_eye_pattern_normal(actor);
    Player_actor_ObjCheck_Close_furniture(actor, game);
    Player_actor_BGcheck_Close_furniture(actor);
    Player_actor_Item_main(actor, game);
    Player_actor_request_proc_index_fromClose_furniture(actor, game, arg);
}
