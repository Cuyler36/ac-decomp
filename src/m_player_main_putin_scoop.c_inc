static int Player_actor_request_main_putin_scoop_all(GAME* game, const xyz_t* pos, mActor_name_t item, int golden_scoop,
                                                     int priority) {
    if (Player_actor_check_request_main_able(game, mPlayer_INDEX_PUTIN_SCOOP, priority)) {
        PLAYER_ACTOR* player = GET_PLAYER_ACTOR_GAME(game);

        player->requested_main_index_data.putin_scoop.dig_pos = *pos;
        player->requested_main_index_data.putin_scoop.item = item;
        player->requested_main_index_data.putin_scoop.get_gold_scoop_flag = golden_scoop;

        Player_actor_request_main_index(game, mPlayer_INDEX_PUTIN_SCOOP, priority);

        return TRUE;
    }

    return FALSE;
}

static void Player_actor_request_main_putin_scoop_from_submenu(ACTOR* actor, GAME* game) {
    mPlayer_request_main_data* data = &(mPlib_Get_change_data_from_submenu_p()->request_main_data);

    Player_actor_request_main_putin_scoop_all(
        game, &data->putin_scoop_from_submenu.wpos, data->putin_scoop_from_submenu.item,
        data->putin_scoop_from_submenu.got_gold_scoop, mPlayer_REQUEST_PRIORITY_31);
}

static void Player_actor_setup_main_Putin_scoop(ACTOR* actor, GAME* game) {
    PLAYER_ACTOR* player = (PLAYER_ACTOR*)actor;
    mPlayer_main_putin_scoop_c* main_scoop = &player->main_data.putin_scoop;
    mPlayer_request_putin_scoop_c* req_scoop = &player->requested_main_index_data.putin_scoop;
    int anim_idx;
    int part_table;

    main_scoop->target_pos = req_scoop->dig_pos;
    main_scoop->item = req_scoop->item;
    main_scoop->get_gold_scoop_flag = req_scoop->get_gold_scoop_flag;

    Player_actor_SetupItem_Base1(actor, mPlayer_ANIM_FILL_UP_I1, -5.0f, &anim_idx, &part_table);

    Player_actor_InitAnimation_Base2(actor, game, mPlayer_ANIM_FILL_UP_I1, mPlayer_ANIM_FILL_UP_I1, 1.0f, 1.0f, 0.5f,
                                     -5.0f, 0, 0);

    if (Common_Get(clip).bg_item_clip) {
        int ut_x;
        int ut_z;
        mActor_name_t item = main_scoop->item;

        mFI_Wpos2UtNum(&ut_x, &ut_z, main_scoop->target_pos);
        if (item) {
            Common_Get(clip).bg_item_clip->player_drop_entry_proc(game, item, ut_x, ut_z, 0);
        }
    }
    Player_actor_setup_main_Base(actor, game);
}

static void Player_actor_Movement_Putin_scoop(ACTOR* actor) {
    PLAYER_ACTOR* player = (PLAYER_ACTOR*)actor;
    mPlayer_main_putin_scoop_c* main_scoop = &player->main_data.putin_scoop;

    Player_actor_Movement_axe_common(actor, &main_scoop->target_pos);
    actor->world.angle.y = actor->shape_info.rotation.y;
}

static int Player_actor_CulcAnimation_Putin_scoop(ACTOR* actor, f32* frame_calc) {
    return Player_actor_CulcAnimation_Base2(actor, frame_calc);
}

static void Player_actor_SetEffect_Putin_scoop(ACTOR* actor, GAME* game) {
    PLAYER_ACTOR* player = (PLAYER_ACTOR*)actor;
    mPlayer_main_putin_scoop_c* main_scoop = &player->main_data.putin_scoop;

    Player_actor_SetEffectHit_Fill_scoop(actor, game, &main_scoop->target_pos);
}

static void Player_actor_SearchAnimation_Putin_scoop(ACTOR* actor, GAME* game, f32 frame) {
    if (!Player_actor_Check_AnimationFrame_PerfectEquel(actor, frame)) {
        Player_actor_SetEffect_Putin_scoop(actor, game);
        Player_actor_SetSound_Fill_scoop(actor);
        Player_actor_Set_FootMark_Base1(actor, game, FALSE, FALSE);
    }
}

static void Player_actor_ObjCheck_Putin_scoop(ACTOR* actor, GAME* game) {
    Player_actor_ObjCheck_Fill_scoop(actor, game);
}

static void Player_actor_BGcheck_Putin_scoop(ACTOR* actor) {
    Player_actor_BGcheck_Fill_scoop(actor);
}

static void Player_actor_lean_angle_Putin_scoop(ACTOR* actor) {
    PLAYER_ACTOR* player = (PLAYER_ACTOR*)actor;
    mPlayer_main_putin_scoop_c* main_scoop = &player->main_data.putin_scoop;

    Player_actor_lean_angle_scoop_common(actor, &main_scoop->target_pos, 49.0f);
}

static void Player_actor_request_proc_index_fromPutin_scoop(ACTOR* actor, GAME* game, int end_flag) {
    PLAYER_ACTOR* player = (PLAYER_ACTOR*)actor;
    mPlayer_main_putin_scoop_c* main_scoop = &player->main_data.putin_scoop;

    if (!main_scoop->get_gold_scoop_flag) {
        Player_actor_request_proc_index_fromFill_scoop(actor, game, end_flag);
    } else if (end_flag) {
        Player_actor_SettleRequestMainIndexPriority(actor);
        Player_actor_request_main_demo_get_golden_item_all(game, mPlayer_GOLDEN_ITEM_TYPE_SHOVEL,
                                                           mPlayer_REQUEST_PRIORITY_34);
    }
}

static void Player_actor_main_Putin_scoop(ACTOR* actor, GAME* game) {
    f32 frame_calc;
    int end_flag;

    Player_actor_Movement_Putin_scoop(actor);
    Player_actor_Reinput_force_position_angle(actor, game);
    end_flag = Player_actor_CulcAnimation_Putin_scoop(actor, &frame_calc);
    Player_actor_SearchAnimation_Putin_scoop(actor, game, frame_calc);
    Player_actor_recover_lean_angle(actor);
    Player_actor_set_eye_pattern_normal(actor);
    Player_actor_ObjCheck_Putin_scoop(actor, game);
    Player_actor_BGcheck_Putin_scoop(actor);
    Player_actor_lean_angle_Putin_scoop(actor);
    Player_actor_Item_main(actor, game);
    Player_actor_request_proc_index_fromPutin_scoop(actor, game, end_flag);
}
