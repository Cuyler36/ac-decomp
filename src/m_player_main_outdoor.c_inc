static int Player_actor_request_main_outdoor(GAME* game, int type, int is_start_demo, int priority) {
    if (Player_actor_check_request_main_able(game, mPlayer_INDEX_OUTDOOR, priority)) {
        PLAYER_ACTOR* player = GET_PLAYER_ACTOR_GAME(game);

        player->requested_main_index_data.outdoor.type = type;
        player->requested_main_index_data.outdoor.is_start_demo = is_start_demo;

        Player_actor_request_main_index(game, mPlayer_INDEX_OUTDOOR, priority);

        return TRUE;
    }

    return FALSE;
}

static void Player_actor_setup_main_Outdoor(ACTOR* actor, GAME* game) {
    PLAYER_ACTOR* player = (PLAYER_ACTOR*)actor;
    int anim_idx;
    f32 anim_frame;
    int type = player->requested_main_index_data.outdoor.type;
    int demo = player->requested_main_index_data.outdoor.is_start_demo;

    player->main_data.outdoor.is_demo = FALSE;

    if (!demo) {
        anim_idx = mPlayer_ANIM_GO_OUT_O1;
        if (type != 0) {
            anim_frame = 1.0f;
        } else {
            anim_frame = 25.0f;
        }
    } else {
        anim_idx = mPlayer_ANIM_GO_OUT_S1;
        anim_frame = 1.0f;
    }

    Player_actor_InitAnimation_Base2(actor, game, anim_idx, anim_idx, anim_frame, anim_frame, 0.5f, 0.0f, 0, 0);
    Player_actor_setup_main_Base(actor, game);
}

static void Player_actor_settle_main_Outdoor(ACTOR* actor, GAME* game) {
    mDemo_End(actor);
}

static int Player_actor_CulcAnimation_Outdoor(ACTOR* actor, f32* calc_frame) {
    return Player_actor_CulcAnimation_Base2(actor, calc_frame);
}

static int Player_actor_Movement_Outdoor(ACTOR* actor, int calc) {
    Player_actor_Set_force_shadow_position_fromAnimePosition(actor);
    Player_actor_Movement_Base_Stop(actor, FALSE);
    return calc;
}

static void Player_actor_ObjCheck_Outdoor(ACTOR* actor, GAME* game) {
    Player_actor_Excute_Corect_forOutdoor(actor, game);
}

static void Player_actor_request_proc_index_fromOutdoor(GAME* game, int arg1) {
    if (arg1 != 0) {
        if (Common_Get(complete_payment_type) != 0) {
            Player_actor_request_main_complete_payment(game, mPlayer_REQUEST_PRIORITY_44);
        } else {
            Player_actor_request_main_return_outdoor_all(game, mPlayer_INDEX_WAIT, 3.0f, 0.0f,
                                                         mPlayer_REQUEST_PRIORITY_45);
        }
    }
}

static void Player_actor_Demo_Outdoor_Demo_ct(ACTOR* actor) {
}

static int Player_actor_Request_Demo_Outdoor(ACTOR* actor) {
    PLAYER_ACTOR* player = (PLAYER_ACTOR*)actor;

    if (player->main_data.outdoor.is_demo == FALSE) {
        if (mDemo_Check(mDemo_TYPE_OUTDOOR, actor)) {
            player->main_data.outdoor.is_demo = TRUE;
            return FALSE;
        } else {
            mDemo_Request(mDemo_TYPE_OUTDOOR, actor, Player_actor_Demo_Outdoor_Demo_ct);
            return FALSE;
        }
    }

    return TRUE;
}

static void Player_actor_main_Outdoor(ACTOR* actor, GAME* game) {
    int arg1;
    f32 frame_calc;

    if (Player_actor_Request_Demo_Outdoor(actor)) {
        int calc = Player_actor_CulcAnimation_Outdoor(actor, &frame_calc);
        arg1 = Player_actor_Movement_Outdoor(actor, calc);
        Player_actor_Reinput_force_position_angle(actor, game);
        Player_actor_recover_lean_angle(actor);
        Player_actor_set_eye_pattern_normal(actor);
        Player_actor_ObjCheck_Outdoor(actor, game);
        Player_actor_Item_main(actor, game);
        Player_actor_request_proc_index_fromOutdoor(game, arg1);
    }
}
