static int Player_actor_request_main_standup(GAME* game, int ftr_no, int priority) {
    if (Player_actor_check_request_main_able(game, mPlayer_INDEX_STANDUP, priority)) {
        PLAYER_ACTOR* player = GET_PLAYER_ACTOR_GAME(game);
        xyz_t player_pos = player->actor_class.world.position;
        s16 rot = player->actor_class.shape_info.rotation.y;

        player_pos.x += 35.0f * sin_s(rot);
        player_pos.z += 35.0f * cos_s(rot);

        if (!Player_actor_SearchPosition_npc_forStand(game, &player_pos)) {
            player->requested_main_index_data.standup.ftrID = ftr_no;
            Player_actor_request_main_index(game, mPlayer_INDEX_STANDUP, priority);

            return TRUE;
        }
    }

    return FALSE;
}

static void Player_actor_setup_main_Standup(ACTOR* actor, GAME* game) {
    PLAYER_ACTOR* player = (PLAYER_ACTOR*)actor;
    cKF_SkeletonInfo_R_c* keyf;
    mPlayer_request_standup_c* req_standup = &player->requested_main_index_data.standup;
    int ftr_no;

    keyf = &player->keyframe0;

    ftr_no = req_standup->ftrID;

    cKF_SkeletonInfo_R_Animation_Set_base_shape_trs(keyf, 0.0f, 1000.0f, 0.0f, 0, 0, 0x4000);
    cKF_SkeletonInfo_R_AnimationMove_ct_base(&actor->world.position, &actor->world.position,
                                             actor->shape_info.rotation.y, 0, 0.0f, keyf, 1);
    Player_actor_InitAnimation_Base2(actor, game, mPlayer_ANIM_STANDUP1, mPlayer_ANIM_STANDUP1, 1.0f, 1.0f, 0.5f, -3.0f,
                                     0, 0);
    Player_actor_setup_main_Base(actor, game);
    Player_actor_sound_STANDUP(actor, ftr_no);
}

static void Player_actor_settle_main_Standup(ACTOR* actor, GAME* game) {
    PLAYER_ACTOR* player = (PLAYER_ACTOR*)actor;

    cKF_SkeletonInfo_R_AnimationMove_dt(&player->keyframe0);
    actor->shape_info.shadow_size_change_rate = 1.0f;
    actor->shape_info.shadow_alpha_change_rate = 1.0f;
}

static int Player_actor_CulcAnimation_Standup(ACTOR* actor, f32* frame_calc) {
    return Player_actor_CulcAnimation_Base2(actor, frame_calc);
}

static void Player_actor_ControlShadow_Standup(ACTOR* actor) {
    Player_actor_AppearShadow_fromAnimationFrame(actor, 12.0f, 8.0f);
}

static void Player_actor_SetSound_Standup(ACTOR* actor) {
    PLAYER_ACTOR* player = (PLAYER_ACTOR*)actor;

    if (Player_actor_Check_AnimationFrame(&player->keyframe0.frame_control, 17.0f)) {
        Player_actor_sound_LANDING(actor);
    }
}

static void Player_actor_SearchAnimation_Standup(ACTOR* actor, f32 frame) {
    if (!Player_actor_Check_AnimationFrame_PerfectEquel(actor, frame)) {
        Player_actor_SetSound_Standup(actor);
    }
    Player_actor_ControlShadow_Standup(actor);
}

static void Player_actor_Movement_Standup(ACTOR* actor) {
    PLAYER_ACTOR* player = (PLAYER_ACTOR*)actor;

    cKF_SkeletonInfo_R_AnimationMove_base(&actor->world.position, &actor->shape_info.rotation.y, &actor->scale,
                                          actor->world.angle.y, &player->keyframe0);
    Player_actor_Movement_Base_Stop(actor, FALSE);
}

static void Player_actor_ObjCheck_Standup(ACTOR* actor, GAME* game) {
    Player_actor_Excute_Corect_forStand(actor, game);
}

static void Player_actor_request_proc_index_fromStandup(ACTOR* actor, GAME* game, int arg) {
    PLAYER_ACTOR* player = (PLAYER_ACTOR*)actor;

    if (arg != 0) {
        Player_actor_SettleRequestMainIndexPriority(actor);
        Player_actor_request_main_wait_all(game, -5.0f, 0.0f, 0, mPlayer_REQUEST_PRIORITY_1);
    }
}

static void Player_actor_main_Standup(ACTOR* actor, GAME* game) {
    f32 frame_calc;
    int arg = Player_actor_CulcAnimation_Standup(actor, &frame_calc);

    Player_actor_SearchAnimation_Standup(actor, frame_calc);
    Player_actor_Movement_Standup(actor);
    Player_actor_Reinput_force_position_angle(actor, game);
    Player_actor_recover_lean_angle(actor);
    Player_actor_set_eye_pattern_normal(actor);
    Player_actor_ObjCheck_Standup(actor, game);
    Player_actor_Item_main(actor, game);
    Player_actor_request_proc_index_fromStandup(actor, game, arg);
}
